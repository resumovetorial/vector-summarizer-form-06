
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { format } from 'date-fns';

interface FormData {
  municipality: string;
  locality: string;
  cycle: string;
  epidemiologicalWeek: string;
  startDate: Date | undefined;
  endDate: Date | undefined;
}

interface ValidationErrors {
  [key: string]: string;
}

export const useVectorForm = () => {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [vectorData, setVectorData] = useState<any>(null);
  const [summary, setSummary] = useState("");
  const [errors, setErrors] = useState<ValidationErrors>({});
  
  const [formData, setFormData] = useState<FormData>({
    municipality: '',
    locality: '',
    cycle: '',
    epidemiologicalWeek: '',
    startDate: undefined,
    endDate: undefined,
  });
  
  const handleInputChange = (field: keyof FormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user types
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };
  
  const validateForm = (): boolean => {
    const newErrors: ValidationErrors = {};
    
    if (!formData.municipality.trim()) {
      newErrors.municipality = 'Município é obrigatório';
    }
    
    if (!formData.locality.trim()) {
      newErrors.locality = 'Localidade é obrigatória';
    }
    
    if (!formData.cycle.trim()) {
      newErrors.cycle = 'Ciclo é obrigatório';
    }
    
    if (!formData.epidemiologicalWeek.trim()) {
      newErrors.epidemiologicalWeek = 'Semana Epidemiológica é obrigatória';
    }
    
    if (!formData.startDate) {
      newErrors.startDate = 'Data Inicial é obrigatória';
    }
    
    if (!formData.endDate) {
      newErrors.endDate = 'Data Final é obrigatória';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast({
        title: "Erro de Validação",
        description: "Por favor, corrija os erros no formulário",
        variant: "destructive",
      });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Simulate API call with timeout
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Simulate creating vector data - in a real app, this would be done by an API
      const mockVectorData = {
        municipality: formData.municipality,
        locality: formData.locality,
        cycle: formData.cycle,
        epidemiologicalWeek: formData.epidemiologicalWeek,
        startDate: formData.startDate,
        endDate: formData.endDate
      };
      
      // Simulate summary - in a real app, this would be generated by an API
      const mockSummary = `Resumo para ${formData.municipality}, ${formData.locality}, durante o ciclo ${formData.cycle} (semana epidemiológica ${formData.epidemiologicalWeek}). Período: ${formData.startDate ? format(formData.startDate, 'PP') : 'N/A'} a ${formData.endDate ? format(formData.endDate, 'PP') : 'N/A'}.`;
      
      setVectorData(mockVectorData);
      setSummary(mockSummary);
      setShowResults(true);
      
      toast({
        title: "Processamento Concluído",
        description: "A sumarização foi gerada com sucesso",
      });
    } catch (error) {
      toast({
        title: "Erro",
        description: "Ocorreu um erro ao processar sua solicitação",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    formData,
    handleInputChange,
    errors,
    isLoading,
    handleSubmit,
    showResults,
    vectorData,
    summary
  };
};
