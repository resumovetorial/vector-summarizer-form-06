
import React, { useState } from 'react';
import { cn } from '@/lib/utils';
import FormField from './FormField';
import SubmitButton from './SubmitButton';
import ResultDisplay from './ResultDisplay';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { useToast } from '@/hooks/use-toast';
import { CalendarIcon } from 'lucide-react';
import { format } from 'date-fns';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Button } from '@/components/ui/button';

interface FormData {
  title: string;
  textContent: string;
  dimensions: number;
  algorithm: string;
  normalization: boolean;
  weightFactor: number;
  // New fields
  municipality: string;
  locality: string;
  cycle: string;
  epidemiologicalWeek: string;
  startDate: Date | undefined;
  endDate: Date | undefined;
}

const VectorSummarizerForm: React.FC = () => {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [vectorData, setVectorData] = useState<any>(null);
  const [summary, setSummary] = useState("");
  const [errors, setErrors] = useState<Partial<Record<keyof FormData, string>>>({});
  
  const [formData, setFormData] = useState<FormData>({
    title: '',
    textContent: '',
    dimensions: 100,
    algorithm: 'tf-idf',
    normalization: true,
    weightFactor: 0.5,
    // New fields initialization
    municipality: '',
    locality: '',
    cycle: '',
    epidemiologicalWeek: '',
    startDate: undefined,
    endDate: undefined,
  });
  
  const handleInputChange = (field: keyof FormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user types
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };
  
  const validateForm = (): boolean => {
    const newErrors: Partial<Record<keyof FormData, string>> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (!formData.textContent.trim()) {
      newErrors.textContent = 'Content is required';
    } else if (formData.textContent.trim().length < 10) {
      newErrors.textContent = 'Content should be at least 10 characters';
    }
    
    if (!formData.municipality.trim()) {
      newErrors.municipality = 'Municipality is required';
    }
    
    if (!formData.locality.trim()) {
      newErrors.locality = 'Locality is required';
    }
    
    if (!formData.cycle.trim()) {
      newErrors.cycle = 'Cycle is required';
    }
    
    if (!formData.epidemiologicalWeek.trim()) {
      newErrors.epidemiologicalWeek = 'Epidemiological week is required';
    }
    
    if (!formData.startDate) {
      newErrors.startDate = 'Start date is required';
    }
    
    if (!formData.endDate) {
      newErrors.endDate = 'End date is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast({
        title: "Validation Error",
        description: "Please fix the errors in the form",
        variant: "destructive",
      });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Simulate API call with timeout
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Simulate creating vector data - in a real app, this would be done by an API
      const mockVectorData = {
        dimensions: formData.dimensions,
        algorithm: formData.algorithm,
        normalized: formData.normalization,
        vector: Array.from({ length: formData.dimensions }, () => (Math.random() * 2 - 1) * formData.weightFactor),
        municipality: formData.municipality,
        locality: formData.locality,
        cycle: formData.cycle,
        epidemiologicalWeek: formData.epidemiologicalWeek,
        startDate: formData.startDate,
        endDate: formData.endDate
      };
      
      // Simulate summary - in a real app, this would be generated by an API
      const mockSummary = `This is a summarized version of "${formData.title}" for ${formData.municipality}, ${formData.locality}, during cycle ${formData.cycle} (epidemiological week ${formData.epidemiologicalWeek}). Period: ${formData.startDate ? format(formData.startDate, 'PP') : 'N/A'} to ${formData.endDate ? format(formData.endDate, 'PP') : 'N/A'}. The content has been processed using the ${formData.algorithm} algorithm with ${formData.dimensions} dimensions and vector normalization set to ${formData.normalization ? "enabled" : "disabled"}.`;
      
      setVectorData(mockVectorData);
      setSummary(mockSummary);
      setShowResults(true);
      
      toast({
        title: "Processing Complete",
        description: "Vector summarization has been successfully generated",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "An error occurred while processing your request",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="w-full max-w-4xl mx-auto">
      <form onSubmit={handleSubmit} className="glass-card rounded-xl p-6 sm:p-8">
        <h2 className="text-xl sm:text-2xl font-semibold mb-6 animate-slide-up">Vector Summarization</h2>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          <FormField
            id="municipality"
            label="Municipality"
            required
            error={errors.municipality}
            animationDelay={50}
          >
            <Input
              id="municipality"
              value={formData.municipality}
              onChange={(e) => handleInputChange('municipality', e.target.value)}
              placeholder="Enter municipality"
              className="w-full"
            />
          </FormField>
          
          <FormField
            id="locality"
            label="Locality"
            required
            error={errors.locality}
            animationDelay={100}
          >
            <Input
              id="locality"
              value={formData.locality}
              onChange={(e) => handleInputChange('locality', e.target.value)}
              placeholder="Enter locality"
              className="w-full"
            />
          </FormField>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          <FormField
            id="cycle"
            label="Cycle"
            required
            error={errors.cycle}
            animationDelay={150}
          >
            <Input
              id="cycle"
              value={formData.cycle}
              onChange={(e) => handleInputChange('cycle', e.target.value)}
              placeholder="Enter cycle"
              className="w-full"
            />
          </FormField>
          
          <FormField
            id="epidemiologicalWeek"
            label="Epidemiological Week"
            required
            error={errors.epidemiologicalWeek}
            animationDelay={200}
          >
            <Input
              id="epidemiologicalWeek"
              value={formData.epidemiologicalWeek}
              onChange={(e) => handleInputChange('epidemiologicalWeek', e.target.value)}
              placeholder="Enter epidemiological week"
              className="w-full"
            />
          </FormField>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          <FormField
            id="startDate"
            label="Start Date"
            required
            error={errors.startDate}
            animationDelay={250}
          >
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className={cn(
                    "w-full justify-start text-left font-normal",
                    !formData.startDate && "text-muted-foreground"
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {formData.startDate ? format(formData.startDate, "PP") : <span>Select date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={formData.startDate}
                  onSelect={(date) => handleInputChange('startDate', date)}
                  initialFocus
                  className="pointer-events-auto"
                />
              </PopoverContent>
            </Popover>
          </FormField>
          
          <FormField
            id="endDate"
            label="End Date"
            required
            error={errors.endDate}
            animationDelay={300}
          >
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className={cn(
                    "w-full justify-start text-left font-normal",
                    !formData.endDate && "text-muted-foreground"
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {formData.endDate ? format(formData.endDate, "PP") : <span>Select date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={formData.endDate}
                  onSelect={(date) => handleInputChange('endDate', date)}
                  initialFocus
                  className="pointer-events-auto"
                />
              </PopoverContent>
            </Popover>
          </FormField>
        </div>
        
        <FormField
          id="title"
          label="Document Title"
          required
          error={errors.title}
          animationDelay={350}
        >
          <Input
            id="title"
            value={formData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            placeholder="Enter document title"
            className="w-full"
          />
        </FormField>
        
        <FormField
          id="textContent"
          label="Text Content"
          required
          error={errors.textContent}
          description="Enter the text you want to convert to vector format and summarize"
          animationDelay={400}
        >
          <Textarea
            id="textContent"
            value={formData.textContent}
            onChange={(e) => handleInputChange('textContent', e.target.value)}
            placeholder="Paste or type your content here..."
            className="w-full min-h-[150px]"
          />
        </FormField>
        
        <Separator className="my-6" />
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          <FormField
            id="algorithm"
            label="Vectorization Algorithm"
            animationDelay={450}
          >
            <Select
              value={formData.algorithm}
              onValueChange={(value) => handleInputChange('algorithm', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select algorithm" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="tf-idf">TF-IDF</SelectItem>
                <SelectItem value="word2vec">Word2Vec</SelectItem>
                <SelectItem value="glove">GloVe</SelectItem>
                <SelectItem value="bert">BERT Embeddings</SelectItem>
              </SelectContent>
            </Select>
          </FormField>
          
          <FormField
            id="dimensions"
            label={`Vector Dimensions: ${formData.dimensions}`}
            animationDelay={500}
          >
            <Slider
              id="dimensions"
              value={[formData.dimensions]}
              min={50}
              max={300}
              step={10}
              onValueChange={([value]) => handleInputChange('dimensions', value)}
              className="py-4"
            />
          </FormField>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
          <FormField
            id="normalization"
            label="Vector Normalization"
            description="Normalize vector values between -1 and 1"
            animationDelay={550}
          >
            <div className="flex items-center space-x-2 pt-2">
              <Switch
                id="normalization"
                checked={formData.normalization}
                onCheckedChange={(checked) => handleInputChange('normalization', checked)}
              />
              <label htmlFor="normalization" className="text-sm font-medium">
                {formData.normalization ? 'Enabled' : 'Disabled'}
              </label>
            </div>
          </FormField>
          
          <FormField
            id="weightFactor"
            label={`Weight Factor: ${formData.weightFactor.toFixed(2)}`}
            description="Adjust the weighting of vector components"
            animationDelay={600}
          >
            <Slider
              id="weightFactor"
              value={[formData.weightFactor]}
              min={0.1}
              max={1}
              step={0.01}
              onValueChange={([value]) => handleInputChange('weightFactor', value)}
              className="py-4"
            />
          </FormField>
        </div>
        
        <div className="flex justify-center sm:justify-end">
          <SubmitButton 
            isLoading={isLoading} 
            isDisabled={isLoading} 
            animationDelay={650}
          />
        </div>
      </form>
      
      <ResultDisplay 
        visible={showResults} 
        vectorData={vectorData} 
        summary={summary} 
      />
    </div>
  );
};

export default VectorSummarizerForm;
